class Solution:
    def kthSmallest(self, root: Optional[TreeNode], k: int) -> int:
        stack = []
        curr = root
        n = 0

        while curr or stack:
            # Traverse to the leftmost node
            while curr:
                stack.append(curr)
                curr = curr.left
            
            # Process the node
            curr = stack.pop()
            n += 1
            
            # Check if we have found the k-th smallest
            if n == k:
                return curr.val
            
            # Move to the right subtree
            curr = curr.right

        # If k is out of the bounds of the tree
        raise ValueError("k is larger than the number of nodes in the tree")
